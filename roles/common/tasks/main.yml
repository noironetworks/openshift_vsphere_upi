---

- set_fact:
     aci_manifests_archive_provided: False

- name: check if aci manifest archive is provided on command line
  set_fact:
     aci_manifests_archive_provided: True
  when: aci_manifests_archive is defined

- name: check existence of user provided aci manifests archive
  stat: path="{{ aci_manifests_archive }}"
  register: user_provided_aci_manifests_archive_stat
  when: aci_manifests_archive is defined
  connection: local

- assert:
     that:
        - user_provided_aci_manifests_archive_stat.stat.exists == True
     fail_msg: "File {{ aci_manifests_archive }} missing"
  when: aci_manifests_archive is defined
  connection: local

- set_fact:
     aci_archive: "{{ aci_manifests_archive }}"
  when: aci_manifests_archive is defined

- name: check default aci manifests archive, when not provided on command line
  stat: path="{{ playbook_dir }}/files/{{ default_aci_manifests_archive }}"
  register: default_aci_manifests_archive_stat
  when: aci_manifests_archive is not defined
  connection: local

- assert:
     that:
        - default_aci_manifests_archive_stat.stat.exists == True
     fail_msg: "File {{ playbook_dir }}/files/{{ default_aci_manifests_archive }} missing"
  when: aci_manifests_archive is not defined

- set_fact:
     aci_archive: "{{ playbook_dir }}/files/{{ default_aci_manifests_archive }}"
  when: aci_manifests_archive is not defined

- name: create base dir structure
  file:
     path: "{{ item }}"
     state: directory
     mode: 0775
  with_items:
     - "{{ base_dir }}"
     - "{{ base_dir }}/terraform"
     - "{{ base_dir }}/aci_manifests"
  connection: local

- name: create terraform modules dir
  file:
     path: "{{ base_dir }}/modules"
     state: directory
     mode: 0775

- name: copy terraform modules
  copy:
     src: "{{ playbook_dir }}/files/terraform_modules/"
     dest: "{{ base_dir }}/modules"

- name: Unarchive aci manifests
  unarchive:
     src: "{{ aci_archive }}"
     dest: "{{ base_dir }}/aci_manifests"
     remote_src: False
  connection: local

- name: check existance of apic.json in aci manifests
  stat: path="{{ base_dir }}/aci_manifests/apic.json"
  register: aci_json_stat
  connection: local

- assert:
     that:
        - aci_json_stat.stat.exists == True
     fail_msg: "File {{ base_dir }}/aci_manifests/apic.json not found"

- name: install python-netaddr
  package:
     name: python3-netaddr
     state: latest
  connection: local
  when: ansible_python['version']['major'] == 3

- name: install python-netaddr
  package:
     name: python-netaddr
     state: latest
  connection: local
  when: ansible_python['version']['major'] == 2

- include_vars:
     file: "{{ base_dir }}/aci_manifests/apic.json"
     name: acivars

- name: Print node network value
  debug:
    var: acivars.node_network

- set_fact:
     aci_system_id: "{{ acivars.system_id }}"
     aci_kubeapi_vlan: "{{ acivars.kubeapi_vlan }}"
     aci_infra_vlan: "{{ acivars.infra_vlan }}"
     aci_apic_hosts: "{{ acivars.apic_hosts }}"
     #machine_network_cidr: "{{ acivars.node_network }}"
     machine_network_cidr: >-
        {%- set sep = " " -%}
        {{ acivars.node_network | ipaddr('ipv4') | join(sep) }}
     machine_network_cidr_ipv6: >-
        {%- set sep = " " -%}
        {{ acivars.node_network | ipaddr('ipv6') | join(sep) }} 
     machine_network_gateway: "{{ acivars.node_network_gateway }}"
     #cluster_network_cidr: "{{ acivars.pod_network }}"
     cluster_network_cidr_v4: >-
        {%- set sep = " " -%}
        {{ acivars.pod_network[0] }}
    
     cluster_network_cidr_v6: >-
        {%- set sep = " " -%}
        {{ acivars.pod_network[1] }}

     node_net_port_group: "{{ acivars.system_id }}_vlan_{{ acivars.kubeapi_vlan }}"
     domain_nameserver: "{% if provision_dns == True %} {{ loadbalancer_ip }} {% else %} {{ dns_forwarder }} {% endif %}"


- set_fact:
     machine_network: "{{ machine_network_cidr | ipaddr('network') }}"
     machine_network_netmask: "{{ machine_network_cidr | ipaddr('netmask') }}"

- debug:
    var: machine_network
- debug:
    var: machine_network_netmask

- set_fact:
     masters_api_ip_list: "{{ masters_api_ip_list | default([])}} + ['{{ item.value.ip }}']"
  with_dict: "{{ masters_vars.nodes }}"

- set_fact:
     workers_api_ip_list: "{{ workers_api_ip_list | default([])}} + ['{{ item.value.ip }}']"
  with_dict: "{{ workers_vars.nodes }}"

- name: Print machine network
  debug:
    var: machine_network

- set_fact:
     rarpa_str: "{{ '.'.join(machine_network.split('.')[::-1][1:4]) }}.in-addr.arpa"

- name: Print rarpa_str..............................
  debug:
    var: rarpa_str

- set_fact:
     ssh_pubid_file: "{{ lookup('env','HOME') }}/.ssh/id_rsa.pub"

- set_fact:
     ssh_public_key: "{{ lookup('file', ssh_pubid_file) }}"

