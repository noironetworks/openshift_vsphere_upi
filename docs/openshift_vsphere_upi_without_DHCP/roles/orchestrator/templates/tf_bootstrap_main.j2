{% set dlist = domainname.split('.') %}
resource "vsphere_virtual_machine" "bootstrap" {
  name             = "{{ dlist[0] }}.bootstrap"
  resource_pool_id = "${data.vsphere_compute_cluster.cluster.resource_pool_id}"
  datastore_id     = "${data.vsphere_datastore.datastore1.id}"
  folder           = ""
  count            = 1

  num_cpus = {{ bootstrap_vars.cpu_count | default(4, true) }}
  memory   = {{ bootstrap_vars.memory_KB | default(8192, true) }}
  guest_id = "${data.vsphere_virtual_machine.RHCOS_template.guest_id}"

  network_interface {
    network_id   = "${data.vsphere_network.network.id}"
    adapter_type = "${data.vsphere_virtual_machine.RHCOS_template.network_interface_types[0]}"
    use_static_mac = true
    mac_address = "${var.bootstrap_mac}"
  }

  disk {
    label            = "disk0"
    size             = "{{ bootstrap_vars.disk_size_MB | default(40, true) }}"
    thin_provisioned = "${data.vsphere_virtual_machine.RHCOS_template.disks.0.thin_provisioned}"
    eagerly_scrub    = "${data.vsphere_virtual_machine.RHCOS_template.disks.0.eagerly_scrub}"
  }

  clone {
    template_uuid = "${data.vsphere_virtual_machine.RHCOS_template.id}"
  }

  vapp {
    properties = {
    "guestinfo.ignition.config.data"          = "${var.bootstrap_ignition_url}"
    "guestinfo.ignition.config.data.encoding" = "base64"
    }
  }
extra_config = {
    "guestinfo.afterburn.initrd.network-kargs" = "ip={{ bootstrap_vars.node_ip }}::{{ network_vars.gateway }}:{{ network_vars.netmask }}:bootstrap:{{ network_vars.interface }}:none nameserver={{ network_vars.dns }}"
 } 
}
